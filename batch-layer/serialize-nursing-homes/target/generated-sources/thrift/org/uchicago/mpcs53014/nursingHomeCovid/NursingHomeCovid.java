/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.uchicago.mpcs53014.nursingHomeCovid;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-11-23")
public class NursingHomeCovid implements org.apache.thrift.TBase<NursingHomeCovid, NursingHomeCovid._Fields>, java.io.Serializable, Cloneable, Comparable<NursingHomeCovid> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NursingHomeCovid");

  private static final org.apache.thrift.protocol.TField REPORTED_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("reportedYear", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField REPORTED_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("reportedMonth", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField REPORTED_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("reportedDay", org.apache.thrift.protocol.TType.BYTE, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NursingHomeCovidStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NursingHomeCovidTupleSchemeFactory();

  public short reportedYear; // required
  public byte reportedMonth; // required
  public byte reportedDay; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPORTED_YEAR((short)1, "reportedYear"),
    REPORTED_MONTH((short)2, "reportedMonth"),
    REPORTED_DAY((short)3, "reportedDay");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPORTED_YEAR
          return REPORTED_YEAR;
        case 2: // REPORTED_MONTH
          return REPORTED_MONTH;
        case 3: // REPORTED_DAY
          return REPORTED_DAY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPORTEDYEAR_ISSET_ID = 0;
  private static final int __REPORTEDMONTH_ISSET_ID = 1;
  private static final int __REPORTEDDAY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPORTED_YEAR, new org.apache.thrift.meta_data.FieldMetaData("reportedYear", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.REPORTED_MONTH, new org.apache.thrift.meta_data.FieldMetaData("reportedMonth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.REPORTED_DAY, new org.apache.thrift.meta_data.FieldMetaData("reportedDay", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NursingHomeCovid.class, metaDataMap);
  }

  public NursingHomeCovid() {
  }

  public NursingHomeCovid(
    short reportedYear,
    byte reportedMonth,
    byte reportedDay)
  {
    this();
    this.reportedYear = reportedYear;
    setReportedYearIsSet(true);
    this.reportedMonth = reportedMonth;
    setReportedMonthIsSet(true);
    this.reportedDay = reportedDay;
    setReportedDayIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NursingHomeCovid(NursingHomeCovid other) {
    __isset_bitfield = other.__isset_bitfield;
    this.reportedYear = other.reportedYear;
    this.reportedMonth = other.reportedMonth;
    this.reportedDay = other.reportedDay;
  }

  public NursingHomeCovid deepCopy() {
    return new NursingHomeCovid(this);
  }

  @Override
  public void clear() {
    setReportedYearIsSet(false);
    this.reportedYear = 0;
    setReportedMonthIsSet(false);
    this.reportedMonth = 0;
    setReportedDayIsSet(false);
    this.reportedDay = 0;
  }

  public short getReportedYear() {
    return this.reportedYear;
  }

  public NursingHomeCovid setReportedYear(short reportedYear) {
    this.reportedYear = reportedYear;
    setReportedYearIsSet(true);
    return this;
  }

  public void unsetReportedYear() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPORTEDYEAR_ISSET_ID);
  }

  /** Returns true if field reportedYear is set (has been assigned a value) and false otherwise */
  public boolean isSetReportedYear() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPORTEDYEAR_ISSET_ID);
  }

  public void setReportedYearIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPORTEDYEAR_ISSET_ID, value);
  }

  public byte getReportedMonth() {
    return this.reportedMonth;
  }

  public NursingHomeCovid setReportedMonth(byte reportedMonth) {
    this.reportedMonth = reportedMonth;
    setReportedMonthIsSet(true);
    return this;
  }

  public void unsetReportedMonth() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPORTEDMONTH_ISSET_ID);
  }

  /** Returns true if field reportedMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetReportedMonth() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPORTEDMONTH_ISSET_ID);
  }

  public void setReportedMonthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPORTEDMONTH_ISSET_ID, value);
  }

  public byte getReportedDay() {
    return this.reportedDay;
  }

  public NursingHomeCovid setReportedDay(byte reportedDay) {
    this.reportedDay = reportedDay;
    setReportedDayIsSet(true);
    return this;
  }

  public void unsetReportedDay() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPORTEDDAY_ISSET_ID);
  }

  /** Returns true if field reportedDay is set (has been assigned a value) and false otherwise */
  public boolean isSetReportedDay() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPORTEDDAY_ISSET_ID);
  }

  public void setReportedDayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPORTEDDAY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case REPORTED_YEAR:
      if (value == null) {
        unsetReportedYear();
      } else {
        setReportedYear((java.lang.Short)value);
      }
      break;

    case REPORTED_MONTH:
      if (value == null) {
        unsetReportedMonth();
      } else {
        setReportedMonth((java.lang.Byte)value);
      }
      break;

    case REPORTED_DAY:
      if (value == null) {
        unsetReportedDay();
      } else {
        setReportedDay((java.lang.Byte)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case REPORTED_YEAR:
      return getReportedYear();

    case REPORTED_MONTH:
      return getReportedMonth();

    case REPORTED_DAY:
      return getReportedDay();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case REPORTED_YEAR:
      return isSetReportedYear();
    case REPORTED_MONTH:
      return isSetReportedMonth();
    case REPORTED_DAY:
      return isSetReportedDay();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NursingHomeCovid)
      return this.equals((NursingHomeCovid)that);
    return false;
  }

  public boolean equals(NursingHomeCovid that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_reportedYear = true;
    boolean that_present_reportedYear = true;
    if (this_present_reportedYear || that_present_reportedYear) {
      if (!(this_present_reportedYear && that_present_reportedYear))
        return false;
      if (this.reportedYear != that.reportedYear)
        return false;
    }

    boolean this_present_reportedMonth = true;
    boolean that_present_reportedMonth = true;
    if (this_present_reportedMonth || that_present_reportedMonth) {
      if (!(this_present_reportedMonth && that_present_reportedMonth))
        return false;
      if (this.reportedMonth != that.reportedMonth)
        return false;
    }

    boolean this_present_reportedDay = true;
    boolean that_present_reportedDay = true;
    if (this_present_reportedDay || that_present_reportedDay) {
      if (!(this_present_reportedDay && that_present_reportedDay))
        return false;
      if (this.reportedDay != that.reportedDay)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + reportedYear;

    hashCode = hashCode * 8191 + (int) (reportedMonth);

    hashCode = hashCode * 8191 + (int) (reportedDay);

    return hashCode;
  }

  @Override
  public int compareTo(NursingHomeCovid other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetReportedYear()).compareTo(other.isSetReportedYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportedYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportedYear, other.reportedYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReportedMonth()).compareTo(other.isSetReportedMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportedMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportedMonth, other.reportedMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReportedDay()).compareTo(other.isSetReportedDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportedDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportedDay, other.reportedDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NursingHomeCovid(");
    boolean first = true;

    sb.append("reportedYear:");
    sb.append(this.reportedYear);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportedMonth:");
    sb.append(this.reportedMonth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportedDay:");
    sb.append(this.reportedDay);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'reportedYear' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'reportedMonth' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'reportedDay' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NursingHomeCovidStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NursingHomeCovidStandardScheme getScheme() {
      return new NursingHomeCovidStandardScheme();
    }
  }

  private static class NursingHomeCovidStandardScheme extends org.apache.thrift.scheme.StandardScheme<NursingHomeCovid> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NursingHomeCovid struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPORTED_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.reportedYear = iprot.readI16();
              struct.setReportedYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPORTED_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.reportedMonth = iprot.readByte();
              struct.setReportedMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPORTED_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.reportedDay = iprot.readByte();
              struct.setReportedDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetReportedYear()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'reportedYear' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetReportedMonth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'reportedMonth' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetReportedDay()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'reportedDay' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NursingHomeCovid struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REPORTED_YEAR_FIELD_DESC);
      oprot.writeI16(struct.reportedYear);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPORTED_MONTH_FIELD_DESC);
      oprot.writeByte(struct.reportedMonth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPORTED_DAY_FIELD_DESC);
      oprot.writeByte(struct.reportedDay);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NursingHomeCovidTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NursingHomeCovidTupleScheme getScheme() {
      return new NursingHomeCovidTupleScheme();
    }
  }

  private static class NursingHomeCovidTupleScheme extends org.apache.thrift.scheme.TupleScheme<NursingHomeCovid> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NursingHomeCovid struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI16(struct.reportedYear);
      oprot.writeByte(struct.reportedMonth);
      oprot.writeByte(struct.reportedDay);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NursingHomeCovid struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.reportedYear = iprot.readI16();
      struct.setReportedYearIsSet(true);
      struct.reportedMonth = iprot.readByte();
      struct.setReportedMonthIsSet(true);
      struct.reportedDay = iprot.readByte();
      struct.setReportedDayIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

