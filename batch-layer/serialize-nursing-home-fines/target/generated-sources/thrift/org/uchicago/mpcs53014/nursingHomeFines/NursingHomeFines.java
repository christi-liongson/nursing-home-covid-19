/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.uchicago.mpcs53014.nursingHomeFines;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-11-21")
public class NursingHomeFines implements org.apache.thrift.TBase<NursingHomeFines, NursingHomeFines._Fields>, java.io.Serializable, Cloneable, Comparable<NursingHomeFines> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NursingHomeFines");

  private static final org.apache.thrift.protocol.TField FEDERAL_PROVIDER_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("federalProviderNumber", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PENALTY_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("penaltyYear", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField PENALTY_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("penaltyMonth", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField PENALTY_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("penaltyDay", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField PENALTY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("penaltyType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FINE_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("fineAmount", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NursingHomeFinesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NursingHomeFinesTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String federalProviderNumber; // required
  public short penaltyYear; // required
  public byte penaltyMonth; // required
  public byte penaltyDay; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String penaltyType; // required
  public int fineAmount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FEDERAL_PROVIDER_NUMBER((short)1, "federalProviderNumber"),
    PENALTY_YEAR((short)2, "penaltyYear"),
    PENALTY_MONTH((short)3, "penaltyMonth"),
    PENALTY_DAY((short)4, "penaltyDay"),
    PENALTY_TYPE((short)5, "penaltyType"),
    FINE_AMOUNT((short)6, "fineAmount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FEDERAL_PROVIDER_NUMBER
          return FEDERAL_PROVIDER_NUMBER;
        case 2: // PENALTY_YEAR
          return PENALTY_YEAR;
        case 3: // PENALTY_MONTH
          return PENALTY_MONTH;
        case 4: // PENALTY_DAY
          return PENALTY_DAY;
        case 5: // PENALTY_TYPE
          return PENALTY_TYPE;
        case 6: // FINE_AMOUNT
          return FINE_AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PENALTYYEAR_ISSET_ID = 0;
  private static final int __PENALTYMONTH_ISSET_ID = 1;
  private static final int __PENALTYDAY_ISSET_ID = 2;
  private static final int __FINEAMOUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FEDERAL_PROVIDER_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("federalProviderNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PENALTY_YEAR, new org.apache.thrift.meta_data.FieldMetaData("penaltyYear", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.PENALTY_MONTH, new org.apache.thrift.meta_data.FieldMetaData("penaltyMonth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PENALTY_DAY, new org.apache.thrift.meta_data.FieldMetaData("penaltyDay", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PENALTY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("penaltyType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINE_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("fineAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NursingHomeFines.class, metaDataMap);
  }

  public NursingHomeFines() {
  }

  public NursingHomeFines(
    java.lang.String federalProviderNumber,
    short penaltyYear,
    byte penaltyMonth,
    byte penaltyDay,
    java.lang.String penaltyType,
    int fineAmount)
  {
    this();
    this.federalProviderNumber = federalProviderNumber;
    this.penaltyYear = penaltyYear;
    setPenaltyYearIsSet(true);
    this.penaltyMonth = penaltyMonth;
    setPenaltyMonthIsSet(true);
    this.penaltyDay = penaltyDay;
    setPenaltyDayIsSet(true);
    this.penaltyType = penaltyType;
    this.fineAmount = fineAmount;
    setFineAmountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NursingHomeFines(NursingHomeFines other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFederalProviderNumber()) {
      this.federalProviderNumber = other.federalProviderNumber;
    }
    this.penaltyYear = other.penaltyYear;
    this.penaltyMonth = other.penaltyMonth;
    this.penaltyDay = other.penaltyDay;
    if (other.isSetPenaltyType()) {
      this.penaltyType = other.penaltyType;
    }
    this.fineAmount = other.fineAmount;
  }

  public NursingHomeFines deepCopy() {
    return new NursingHomeFines(this);
  }

  @Override
  public void clear() {
    this.federalProviderNumber = null;
    setPenaltyYearIsSet(false);
    this.penaltyYear = 0;
    setPenaltyMonthIsSet(false);
    this.penaltyMonth = 0;
    setPenaltyDayIsSet(false);
    this.penaltyDay = 0;
    this.penaltyType = null;
    setFineAmountIsSet(false);
    this.fineAmount = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFederalProviderNumber() {
    return this.federalProviderNumber;
  }

  public NursingHomeFines setFederalProviderNumber(@org.apache.thrift.annotation.Nullable java.lang.String federalProviderNumber) {
    this.federalProviderNumber = federalProviderNumber;
    return this;
  }

  public void unsetFederalProviderNumber() {
    this.federalProviderNumber = null;
  }

  /** Returns true if field federalProviderNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetFederalProviderNumber() {
    return this.federalProviderNumber != null;
  }

  public void setFederalProviderNumberIsSet(boolean value) {
    if (!value) {
      this.federalProviderNumber = null;
    }
  }

  public short getPenaltyYear() {
    return this.penaltyYear;
  }

  public NursingHomeFines setPenaltyYear(short penaltyYear) {
    this.penaltyYear = penaltyYear;
    setPenaltyYearIsSet(true);
    return this;
  }

  public void unsetPenaltyYear() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PENALTYYEAR_ISSET_ID);
  }

  /** Returns true if field penaltyYear is set (has been assigned a value) and false otherwise */
  public boolean isSetPenaltyYear() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PENALTYYEAR_ISSET_ID);
  }

  public void setPenaltyYearIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PENALTYYEAR_ISSET_ID, value);
  }

  public byte getPenaltyMonth() {
    return this.penaltyMonth;
  }

  public NursingHomeFines setPenaltyMonth(byte penaltyMonth) {
    this.penaltyMonth = penaltyMonth;
    setPenaltyMonthIsSet(true);
    return this;
  }

  public void unsetPenaltyMonth() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PENALTYMONTH_ISSET_ID);
  }

  /** Returns true if field penaltyMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetPenaltyMonth() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PENALTYMONTH_ISSET_ID);
  }

  public void setPenaltyMonthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PENALTYMONTH_ISSET_ID, value);
  }

  public byte getPenaltyDay() {
    return this.penaltyDay;
  }

  public NursingHomeFines setPenaltyDay(byte penaltyDay) {
    this.penaltyDay = penaltyDay;
    setPenaltyDayIsSet(true);
    return this;
  }

  public void unsetPenaltyDay() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PENALTYDAY_ISSET_ID);
  }

  /** Returns true if field penaltyDay is set (has been assigned a value) and false otherwise */
  public boolean isSetPenaltyDay() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PENALTYDAY_ISSET_ID);
  }

  public void setPenaltyDayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PENALTYDAY_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPenaltyType() {
    return this.penaltyType;
  }

  public NursingHomeFines setPenaltyType(@org.apache.thrift.annotation.Nullable java.lang.String penaltyType) {
    this.penaltyType = penaltyType;
    return this;
  }

  public void unsetPenaltyType() {
    this.penaltyType = null;
  }

  /** Returns true if field penaltyType is set (has been assigned a value) and false otherwise */
  public boolean isSetPenaltyType() {
    return this.penaltyType != null;
  }

  public void setPenaltyTypeIsSet(boolean value) {
    if (!value) {
      this.penaltyType = null;
    }
  }

  public int getFineAmount() {
    return this.fineAmount;
  }

  public NursingHomeFines setFineAmount(int fineAmount) {
    this.fineAmount = fineAmount;
    setFineAmountIsSet(true);
    return this;
  }

  public void unsetFineAmount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FINEAMOUNT_ISSET_ID);
  }

  /** Returns true if field fineAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetFineAmount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FINEAMOUNT_ISSET_ID);
  }

  public void setFineAmountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FINEAMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FEDERAL_PROVIDER_NUMBER:
      if (value == null) {
        unsetFederalProviderNumber();
      } else {
        setFederalProviderNumber((java.lang.String)value);
      }
      break;

    case PENALTY_YEAR:
      if (value == null) {
        unsetPenaltyYear();
      } else {
        setPenaltyYear((java.lang.Short)value);
      }
      break;

    case PENALTY_MONTH:
      if (value == null) {
        unsetPenaltyMonth();
      } else {
        setPenaltyMonth((java.lang.Byte)value);
      }
      break;

    case PENALTY_DAY:
      if (value == null) {
        unsetPenaltyDay();
      } else {
        setPenaltyDay((java.lang.Byte)value);
      }
      break;

    case PENALTY_TYPE:
      if (value == null) {
        unsetPenaltyType();
      } else {
        setPenaltyType((java.lang.String)value);
      }
      break;

    case FINE_AMOUNT:
      if (value == null) {
        unsetFineAmount();
      } else {
        setFineAmount((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FEDERAL_PROVIDER_NUMBER:
      return getFederalProviderNumber();

    case PENALTY_YEAR:
      return getPenaltyYear();

    case PENALTY_MONTH:
      return getPenaltyMonth();

    case PENALTY_DAY:
      return getPenaltyDay();

    case PENALTY_TYPE:
      return getPenaltyType();

    case FINE_AMOUNT:
      return getFineAmount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FEDERAL_PROVIDER_NUMBER:
      return isSetFederalProviderNumber();
    case PENALTY_YEAR:
      return isSetPenaltyYear();
    case PENALTY_MONTH:
      return isSetPenaltyMonth();
    case PENALTY_DAY:
      return isSetPenaltyDay();
    case PENALTY_TYPE:
      return isSetPenaltyType();
    case FINE_AMOUNT:
      return isSetFineAmount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NursingHomeFines)
      return this.equals((NursingHomeFines)that);
    return false;
  }

  public boolean equals(NursingHomeFines that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_federalProviderNumber = true && this.isSetFederalProviderNumber();
    boolean that_present_federalProviderNumber = true && that.isSetFederalProviderNumber();
    if (this_present_federalProviderNumber || that_present_federalProviderNumber) {
      if (!(this_present_federalProviderNumber && that_present_federalProviderNumber))
        return false;
      if (!this.federalProviderNumber.equals(that.federalProviderNumber))
        return false;
    }

    boolean this_present_penaltyYear = true;
    boolean that_present_penaltyYear = true;
    if (this_present_penaltyYear || that_present_penaltyYear) {
      if (!(this_present_penaltyYear && that_present_penaltyYear))
        return false;
      if (this.penaltyYear != that.penaltyYear)
        return false;
    }

    boolean this_present_penaltyMonth = true;
    boolean that_present_penaltyMonth = true;
    if (this_present_penaltyMonth || that_present_penaltyMonth) {
      if (!(this_present_penaltyMonth && that_present_penaltyMonth))
        return false;
      if (this.penaltyMonth != that.penaltyMonth)
        return false;
    }

    boolean this_present_penaltyDay = true;
    boolean that_present_penaltyDay = true;
    if (this_present_penaltyDay || that_present_penaltyDay) {
      if (!(this_present_penaltyDay && that_present_penaltyDay))
        return false;
      if (this.penaltyDay != that.penaltyDay)
        return false;
    }

    boolean this_present_penaltyType = true && this.isSetPenaltyType();
    boolean that_present_penaltyType = true && that.isSetPenaltyType();
    if (this_present_penaltyType || that_present_penaltyType) {
      if (!(this_present_penaltyType && that_present_penaltyType))
        return false;
      if (!this.penaltyType.equals(that.penaltyType))
        return false;
    }

    boolean this_present_fineAmount = true;
    boolean that_present_fineAmount = true;
    if (this_present_fineAmount || that_present_fineAmount) {
      if (!(this_present_fineAmount && that_present_fineAmount))
        return false;
      if (this.fineAmount != that.fineAmount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFederalProviderNumber()) ? 131071 : 524287);
    if (isSetFederalProviderNumber())
      hashCode = hashCode * 8191 + federalProviderNumber.hashCode();

    hashCode = hashCode * 8191 + penaltyYear;

    hashCode = hashCode * 8191 + (int) (penaltyMonth);

    hashCode = hashCode * 8191 + (int) (penaltyDay);

    hashCode = hashCode * 8191 + ((isSetPenaltyType()) ? 131071 : 524287);
    if (isSetPenaltyType())
      hashCode = hashCode * 8191 + penaltyType.hashCode();

    hashCode = hashCode * 8191 + fineAmount;

    return hashCode;
  }

  @Override
  public int compareTo(NursingHomeFines other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFederalProviderNumber()).compareTo(other.isSetFederalProviderNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFederalProviderNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.federalProviderNumber, other.federalProviderNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPenaltyYear()).compareTo(other.isSetPenaltyYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPenaltyYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.penaltyYear, other.penaltyYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPenaltyMonth()).compareTo(other.isSetPenaltyMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPenaltyMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.penaltyMonth, other.penaltyMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPenaltyDay()).compareTo(other.isSetPenaltyDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPenaltyDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.penaltyDay, other.penaltyDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPenaltyType()).compareTo(other.isSetPenaltyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPenaltyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.penaltyType, other.penaltyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFineAmount()).compareTo(other.isSetFineAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFineAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fineAmount, other.fineAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NursingHomeFines(");
    boolean first = true;

    sb.append("federalProviderNumber:");
    if (this.federalProviderNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.federalProviderNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("penaltyYear:");
    sb.append(this.penaltyYear);
    first = false;
    if (!first) sb.append(", ");
    sb.append("penaltyMonth:");
    sb.append(this.penaltyMonth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("penaltyDay:");
    sb.append(this.penaltyDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("penaltyType:");
    if (this.penaltyType == null) {
      sb.append("null");
    } else {
      sb.append(this.penaltyType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fineAmount:");
    sb.append(this.fineAmount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (federalProviderNumber == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'federalProviderNumber' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'penaltyYear' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'penaltyMonth' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'penaltyDay' because it's a primitive and you chose the non-beans generator.
    if (penaltyType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'penaltyType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'fineAmount' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NursingHomeFinesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NursingHomeFinesStandardScheme getScheme() {
      return new NursingHomeFinesStandardScheme();
    }
  }

  private static class NursingHomeFinesStandardScheme extends org.apache.thrift.scheme.StandardScheme<NursingHomeFines> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NursingHomeFines struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FEDERAL_PROVIDER_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.federalProviderNumber = iprot.readString();
              struct.setFederalProviderNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PENALTY_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.penaltyYear = iprot.readI16();
              struct.setPenaltyYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PENALTY_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.penaltyMonth = iprot.readByte();
              struct.setPenaltyMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PENALTY_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.penaltyDay = iprot.readByte();
              struct.setPenaltyDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PENALTY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.penaltyType = iprot.readString();
              struct.setPenaltyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FINE_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fineAmount = iprot.readI32();
              struct.setFineAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPenaltyYear()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'penaltyYear' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPenaltyMonth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'penaltyMonth' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPenaltyDay()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'penaltyDay' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFineAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fineAmount' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NursingHomeFines struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.federalProviderNumber != null) {
        oprot.writeFieldBegin(FEDERAL_PROVIDER_NUMBER_FIELD_DESC);
        oprot.writeString(struct.federalProviderNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PENALTY_YEAR_FIELD_DESC);
      oprot.writeI16(struct.penaltyYear);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PENALTY_MONTH_FIELD_DESC);
      oprot.writeByte(struct.penaltyMonth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PENALTY_DAY_FIELD_DESC);
      oprot.writeByte(struct.penaltyDay);
      oprot.writeFieldEnd();
      if (struct.penaltyType != null) {
        oprot.writeFieldBegin(PENALTY_TYPE_FIELD_DESC);
        oprot.writeString(struct.penaltyType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FINE_AMOUNT_FIELD_DESC);
      oprot.writeI32(struct.fineAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NursingHomeFinesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NursingHomeFinesTupleScheme getScheme() {
      return new NursingHomeFinesTupleScheme();
    }
  }

  private static class NursingHomeFinesTupleScheme extends org.apache.thrift.scheme.TupleScheme<NursingHomeFines> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NursingHomeFines struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.federalProviderNumber);
      oprot.writeI16(struct.penaltyYear);
      oprot.writeByte(struct.penaltyMonth);
      oprot.writeByte(struct.penaltyDay);
      oprot.writeString(struct.penaltyType);
      oprot.writeI32(struct.fineAmount);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NursingHomeFines struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.federalProviderNumber = iprot.readString();
      struct.setFederalProviderNumberIsSet(true);
      struct.penaltyYear = iprot.readI16();
      struct.setPenaltyYearIsSet(true);
      struct.penaltyMonth = iprot.readByte();
      struct.setPenaltyMonthIsSet(true);
      struct.penaltyDay = iprot.readByte();
      struct.setPenaltyDayIsSet(true);
      struct.penaltyType = iprot.readString();
      struct.setPenaltyTypeIsSet(true);
      struct.fineAmount = iprot.readI32();
      struct.setFineAmountIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

